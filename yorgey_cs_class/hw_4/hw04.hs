-- HOMEWORK 4

-- Exercise 1 - Wholemeal programming
{- Filter evens, subtract two, put in list, take the product of all values in the list -}
fun1 :: [Integer] -> Integer
fun1 [] = 1
fun1 (x:xs)
  | even x = (x - 2) * fun1 xs
  | otherwise = fun1 xs

{- Needed to know that this is a hailstone sequence. Put all items in the corresponding hailstone
sequence generated by the input into a list, which will be infinite, then take while the number doesn't
equal 1 (bc #1 ends the hailstone sequence).  Once that is done, need to sum ONLY THE EVEN numbers in the
list we've generated. Tricky. -}
fun2 :: Integer -> Integer
fun2 1 = 0
fun2 n 
  | even n    = n + fun2 (n `div` 2)
  | otherwise = fun2 (3 * n + 1)

fun1' :: [Integer] -> Integer
fun1' =  foldr (*) 1 . map (subtract 2) . filter even

fun2' :: Integer -> Integer
fun2' a = sum $ filter even $ takeWhile (/= 1) $ iterate hailstone a
  where hailstone b = if even b
                      then b `div` 2
                      else 3 * b + 1

hailstone :: Integer -> Integer
hailstone n
  | n `mod` 2 == 0 = n `div` 2
  | otherwise      = 3*n + 1


-- EXERCISE 2 - Folding with Trees 
{--TESTCASE: foldTree "ABCDEFGHIJ" ==
Node 3
	(Node 2
		(Node 0 Leaf ’F’ Leaf)
		’I’
		(Node 1 (Node 0 Leaf ’B’ Leaf) ’C’ Leaf))
	’J’
	(Node 2
		(Node 1 (Node 0 Leaf ’A’ Leaf) ’G’ Leaf)
		’H’
		(Node 1 (Node 0 Leaf ’D’ Leaf) ’E’ Leaf))
-}

data Tree a = Leaf
            | Node Integer (Tree a) a (Tree a)
        deriving (Show, Eq)

-- Generate a binary tree from a list of values, using @foldr@
foldTree :: [a] -> Tree a
foldTree = foldr insert Leaf
	where
		insert :: a -> Tree a -> Tree a
		insert x Leaf = Node 0 Leaf x Leaf  
		insert x (Node height left val right) 
		    | treeHeight left <= treeHeight right =
		    	let new_left = insert x left
		    	in Node (treeHeight new_left) (insert x left) val right 
		    | otherwise =
		    	let new_right = insert x right
		    	in Node (treeHeight new_right) (insert x right) val left 

treeHeight :: Tree a -> Integer
treeHeight Leaf = 0
treeHeight (Node height _ _ _) = height + 1



























  
